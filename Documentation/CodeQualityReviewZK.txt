Code quality review
Author: Zach Kallmeyer
Date: 9-26-22
Sprint #2
File being reviewed: SpriteFactory.cs
Author of file being reviewed: Nick Trambitas

There are a lot of Lists and arrays of Lists being created here. They are all
necessary for how our architecture is and how SpriteFactory works at the moment,
but it looks like a lot of repeated code that we might be able to refactor out
later. This could be an instance of the duplicated code smell, but I’m not sure
if that’s possible for declarations. I don’t think that it is, but I just
wanted to mention it as a possibility. Protection levels are good, with classes
that are sealed or private and public methods. The methods are not too big,
although we might want to factor out each type of sprite into their own
GetNewSprite method (i.e. GetNewLinkSprite, GetNewGoriyaSprite, etc.). Method
names are clear and concise.

One change we could make to the game relating to SpriteFactory is to only load
the desired sprites on call and not load every sprite in one LoadAllContent
call. The current implementation could fairly easily support this change by
factoring LoadAllContent into smaller methods which each load specific sprites
or sets of sprites. However, I don’t think this would be a beneficial change at
the moment, as we have it loading all content at once to purposely eliminate
the need for multiple load calls. If memory space becomes an issue in the
future, however, this could be something to look into.


--------------------------------------------------------------------------------


Code quality review
Author: Zach Kallmeyer
Date: 10-19-22
Sprint #3
File being reviewed: BoomerangType.cs
Author of file being reviewed: Kyle Hoefker

The quality of this code is very good, with very few code smells that I can
detect. All instance variables are set. Methods are short and concise. Although
the update method is slightly longer, it needs to be to contain the functionality
we want and contains no extra fluff. Methods are public, all code is used, and
variable names describe exactly what the variables are storing. One change to
this code that I think might make this better would be to avoid the switch case
with setting direction by simply doing projectile.SetDirection(direction). I
know that with the current implementation this is commented out, but in case it
needs to return when we implement the radius-based speed logic, changing our
direction enums to match this data would be very useful.

One change we could make to the game from this current projectile implementation
would be to dynamically adjust boomerang speed based on distance from Link. I
think the current implementation could easily support this change. You are
already checking the projectile’s distance, but just statically alter the speed
when it reaches a certain distance based on the counter. This could support a
change where speed is set based on this distance value, using a simple velocity
equation.


